
trigger:
- azpipeline
name: Build the resource
pool:
  vmImage: ubuntu-latest
## Set up variable from library
variables: 
  - group: demogroup
  ## Add this under variables section in the pipeline
  - name: azSubscription
    value: $[variables.AZSUBSCRIPTION]
  - name : az_group
    value: $[variables.GRPNAME]
  - name: az_location
    value: $[variables.REGION]

## Validate the terraform
stages:
  - stage: Devstage
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - script: |
            echo 'Checking contents of the working directory...'
            ls -R $(System.DefaultWorkingDirectory)
          displayName: Checking the working directory
        - task: PublishBuildArtifacts@1
          displayName: Publish the artifact for terraform manifest
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform'
            ArtifactName: 'terraform-manifest'
            publishLocation: Container

        - task: TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            backendServiceArm: 'demo-svc'
            backendAzureRmResourceGroupName: 'demogrp'
            backendAzureRmStorageAccountName: 'tfstate22801'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'tf-pipeline'
        - task: TerraformTaskV4@4
          displayName: Terrafrom Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  - stage: 
    jobs:  
      - job: TerraformBuildResource
        steps:
        ## Terraform Config backend
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
            backendServiceArm: 'demo-svc'
            backendAzureRmResourceGroupName: 'demogrp'
            backendAzureRmStorageAccountName: 'tfstate22801'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'tf-pipeline'
        ## Dowload SSHkey file
        - task: DownloadSecureFile@1
          name: sshkey
          inputs:
            secureFile: 'id_azlinuxvm.pub'
        ## Terraform
        ## Terraform plan
        - task: TerraformTaskV4@4
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            environmentServiceNameAzureRM: 'demo-svc'
            command: 'plan'
            commandOptions: '-var ssh_public_key=($sshkey.secureFilePath) -var-file $(System.DefaultWorkingDirectory)/terraform/tfvars/dev.tfvars'