
trigger:
- azpipeline
name: Build the resource
pool:
  vmImage: ubuntu-latest
## Set up variable from library
variables: 
  - group: demogroup
  ## Add this under variables section in the pipeline
  - name: azSubscription
    value: $[variables.AZSUBSCRIPTION]
  - name : az_group
    value: $[variables.GRPNAME]
  - name: az_location
    value: $[variables.REGION]

## Validate the terraform
stages:
  - stage: BuildTheInfrasctruture
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - script: |
            echo 'Checking contents of the working directory...'
            ls -R $(System.DefaultWorkingDirectory)
          displayName: Checking the working directory
        - task: TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            backendServiceArm: 'demo-svc'
            backendAzureRmResourceGroupName: 'demogrp'
            backendAzureRmStorageAccountName: 'tfstate22801'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'tf-pipeline'
        - task: TerraformTaskV4@4
          displayName: Terrafrom Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        ## Publish Artifact
        - task: PublishPipelineArtifact@1
          displayName: Publish the artifact for terraform manifest
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform'
            artifact: 'terraform-manifest'
      ## Build the resource      
      - job: TerraformBuildResource
        dependsOn: TerraformValidateJob
        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'terraform-manifest'
            targetPath: '$(Pipeline.Workspace)/terraform-manifest'
        - script: |
            echo 'Assign the permission for the terraform configuration'
            chmod +r $(Pipeline.Workspace)/terraform-manifest/.terraform
            echo 'Checking contents of the working directory...'
            ls -Ral $(Pipeline.Workspace)/terraform-manifest
          displayName: Checking the working directory        
        # Assign the Read Permission
        ## Dowload SSHkey file
        - task: DownloadSecureFile@1
          name: sshkey
          inputs:
            secureFile: 'id_azlinuxvm.pub'
        ## Terraform backend
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifest'
            commandOptions: '--upgrade'
        ## Terraform plan
        - task: TerraformTaskV4@4
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            environmentServiceNameAzureRM: 'demo-svc'
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifest'
            command: 'plan'
            commandOptions: '-var ssh_public_key=($sshkey.secureFilePath) -var-file $(Pipeline.Workspace)/terraform-manifest/tfvars/dev.tfvars'